{"meta":{"title":"Tech Blog","subtitle":"GSN CDN Dev.","description":null,"author":"DevTeam","url":"https://gsneotek-wisen.github.io"},"pages":[{"title":"","date":"2018-04-25T09:12:01.000Z","updated":"2018-04-26T05:50:53.063Z","comments":true,"path":"about/index.html","permalink":"https://gsneotek-wisen.github.io/about/index.html","excerpt":"","text":"About이 블로그는 지속 가능한 IT 인생을 위해 서슴없이 자행되는 삽질 그리고 고군분투 에 대한 현재 진행형 비망록 입니다."},{"title":"Categories","date":"2018-04-25T09:12:01.000Z","updated":"2018-04-25T09:15:27.772Z","comments":false,"path":"categories/index.html","permalink":"https://gsneotek-wisen.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-04-25T09:12:01.000Z","updated":"2018-04-25T09:15:56.067Z","comments":true,"path":"tags/index.html","permalink":"https://gsneotek-wisen.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"accompanyi","slug":"accompanyi","date":"2018-05-04T06:27:24.467Z","updated":"2018-05-04T06:39:07.090Z","comments":true,"path":"2018/05/04/accompanyi/","link":"","permalink":"https://gsneotek-wisen.github.io/2018/05/04/accompanyi/","excerpt":"","text":"소개개발을 꾸준히 하기위해 단련을 하는중이다. 그 과정을 블로그로 남기려 부족하지만 차근차근 글을 써나가 보려한다. 내가 맡은 일은 사내에있는 통합모니터링 시스템 재구축(쥬피터 고도화)이라는 프로젝트에 개발자로 포함되어있다. 이중 맡은 업무는 API 서버 담당이였다. 기존 웹개발만 깨작거리다 API서버에대해 제대로 고민하고 만들려한건 처음이라 많은 걱정이 앞섰지만 그래도 시작하였다. 선행조건 스터디를 위해서 선행조선이 제시되었다. 웹프레임워크는 사용하지말것, 네트워크관련 프레임워크, HTTP관련 라이브러리는 사용가능. 만약 기간을 맞추지 못한다면 수단방법 가리지말고 무조건 작동하게 만들것. 요구사항기간을 입력받아 InfluxDB에 있는 시계열 시스템이용수치를 제공하는 RESTFul API 작성 기초공부사실 REST를 개발을해봤다고하지만.. 정확한 개념을 이해하고 쓰지 않았던거 같아 다시 찾아봤다. REST(Representational State Transfer) : HTTP를 이용한 CRUD를 용이하게 처리하기위한 API 디자인 네트워크 프레임워크(서버프레임워크로 연관검색 됨) Netty 웹서버 프레임워크(웹컨테이너로 연관검색 됨) Tomcat, Resin, WebLogic, Jeus, Jetty, WebSphere, JBOSS HTTP 라이브러리 Jersey 프로젝트 구성선행조건과 요구사항을 부합하기위해 Jersey + Netty 조건으로 JDK8로 선택하였으며, 프로젝트는 gradle 로 결정. Netty는 HTTP 프로토콜을 처리해서 받고, Jersey는 Restful API 관련 핸들러를 이용해서 메시지를 처리하게끔 프로젝트를 구성. 의존성 Netty 5.0.0.Alpha1 Jersey-server 2.7 Influxdb-java 2.9 Gson 2.8.2 ※ Jersey라이브러리에서 Jaxb-api 를 참조하고있는데, JAXB API는 Java EE API로 간주되므로 더 이상 Java SE 9의 기본 클래스 경로에 포함되지 않아 Java9에서 사용할경우 Jaxb-api 추가해야한다. ※ Jersey-server라이브러리 최신버전은 작성일 기준 2.27이 최신버전이였다. 최신버전을 사용시 InjectionManagerFactory not found. 라는 에러가 발생하였다. 이에러는 jersey-hk2 를 추가해서 해결했었다. 하지만 2.7버전에서는 문제없이 사용가능하길래 2.7로 다운그레이드하여 작업하였다. 개발내용 Netty ServerBootstrap 생성 12345678910111213141516171819public HttpServer() &#123; //bossGroup 클라이언트 연결을 수락하는 부모 스레드 그룹 //NioEventLoopGroup(인수) 스레드 그룹 내에서 생성할 최대 스레드 수 bossGroup = new NioEventLoopGroup(); //연결된 클라이언트 소켓으로부터 데이터 입출력(I/O) 및 이벤트처리 담당하는 자식 쓰레드 그룹 //인수가 없으면 CPU 코어 수에 따른 쓰레드의 수 결정. workerGroup = new NioEventLoopGroup(); //부트 스트랩 객체 생성 bootstrap = new ServerBootstrap(); //스레드 그룹 초기화 bootstrap.group(bossGroup, workerGroup); //채널 초기화 bootstrap.channel(NioServerSocketChannel.class); //자식 채널의 초기화 bootstrap.childHandler(new HttpServerInitializer()); &#125; ChannelInitializer 및 Jersey Handler생성 1234567891011121314151617181920212223public class HttpServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; private static final int MESSAGE_SIZE = 1024 * 1024; private final ChannelHandler jerseyHandler; //클라이언트로부터 연결된 채널이 초기화 될때의 기본동작이 지정된 추상 클래스 public HttpServerInitializer() &#123; jerseyHandler = createJerseyHandler(); &#125; @Override public void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline p = ch.pipeline(); p.addLast(\"codec\", new HttpServerCodec()); //POST 처리를 하려면 사이즈를 지정해줘야한다. p.addLast(\"aggregator\", new HttpObjectAggregator(MESSAGE_SIZE)); p.addLast(\"jerseyHandler\", jerseyHandler); &#125; private ChannelHandler createJerseyHandler() &#123; ResourceConfig resourceConfig = new ResourceConfig().registerClasses(NettyEndpoint.class); return new JerseyHandler(new ApplicationHandler(resourceConfig)); &#125; &#125; EndPoint 생성(Method 처리) 1234567891011121314151617181920@Singleton@Path(\"/api\")public class NettyEndpoint &#123; @GET@Path(\"/&#123;param&#125;\") @Produces(MediaType.APPLICATION_JSON) public Response getMsg(@PathParam(\"param\") String msg, @QueryParam(\"startTime\") String startTime, @QueryParam(\"endTime\") String endTime) &#123; //get Message 처리 ... //DB 연결생성 InfluxDb db = new InfluxDb(); //json String Return String ret = db.select(parms); return Response.status(Status.OK).entity(ret).build(); &#125;&#125; DB조회 1234567891011121314151617181920212223242526272829public class InfluxDb &#123; private InfluxDB influxDB = null; private String dbName; //connect public InfluxDb() &#123; this.influxDB = connectDB(url, userId, userPwd); &#125; public void connectDB(String url, String userName, String password) &#123; return InfluxDBFactory.connect(url, userName, password); &#125; public String select(parameter parms) &#123; //dbselect Query query = new Query(queryStr, dbName); QueryResult queryResult = influxDB.query(query); InfluxDBResultMapper resultMapper = new InfluxDBResultMapper(); //cpu == db구조에맞게 생성된 POJO class List&lt;cpu&gt; cpuList = resultMapper.toPOJO(queryResult, cpu.class); //json string return return new Gson().toJson(cpuList); &#125;&#125; Server Start 1234567891011121314public void start() throws Exception &#123; try &#123; ChannelFuture channelFuture = bootstrap.bind(PORT).sync(); //wait until the server socket is closed. channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125;&#125; public static void main(String[] args) throws Exception &#123; new HttpServer().start();&#125; 마치며처음에 netty와 jersey 함께 사용하는 방법을 몰라 한참을 뱅뱅 돌았다. github사이트에서 검색과 jersey github에서 netty와 연동하는 example을 clone하여 실행하였으나 많은 헛고생을했다. 그중에 큰 잘못이라 생각되는것은 의존성을 체크하였으나 maven프로젝트의 상위프로젝트에 의존하고있는 라이브러리 내용을 확인하지않고 실행한것 example에서 제공하는 버전을 사용하지않고 임의로 최신버전을 사용한것. 정리해보면 별거 간단하고, 엄청 간단한 실수들이였다.. 이걸 만드는데 사실 만드는데 1주일이란 시간이 걸렸다는게 사실 부끄럽다. 앞으로 더 집중하고 공부를 .. 계속 해야겠다.. Ref http://sshinbdev.tistory.com/6 http://jdm.kr/blog/151 http://lucrative.tistory.com/86?category=784655 https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa https://github.com/influxdata/influxdb-java https://github.com/cgbystrom/jersey-netty/blob/master/src/main/java/com/sun/jersey/server/impl/container/netty/NettyHandlerContainer.java https://github.com/dagingaa/netty-jersey2/blob/master/src/main/java/com/comoyo/nettyexample/HttpServer.java https://github.com/jersey/jersey Next 자료와 검증이된 스택 활용 대중적인 API서버를 벤치마킹하여 프로토콜 재설계 InfluxDB -&gt; AWS Cloud Watch에서 데이터 가져오기","categories":[{"name":"Dev","slug":"Dev","permalink":"https://gsneotek-wisen.github.io/categories/Dev/"}],"tags":[{"name":"Jersey","slug":"Jersey","permalink":"https://gsneotek-wisen.github.io/tags/Jersey/"},{"name":"Netty","slug":"Netty","permalink":"https://gsneotek-wisen.github.io/tags/Netty/"},{"name":"InfluxDB","slug":"InfluxDB","permalink":"https://gsneotek-wisen.github.io/tags/InfluxDB/"},{"name":"JAVA8","slug":"JAVA8","permalink":"https://gsneotek-wisen.github.io/tags/JAVA8/"},{"name":"JAVA9","slug":"JAVA9","permalink":"https://gsneotek-wisen.github.io/tags/JAVA9/"},{"name":"HTTP","slug":"HTTP","permalink":"https://gsneotek-wisen.github.io/tags/HTTP/"},{"name":"REST","slug":"REST","permalink":"https://gsneotek-wisen.github.io/tags/REST/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-04-25T06:10:04.084Z","updated":"2018-04-27T03:11:21.406Z","comments":true,"path":"2018/04/25/hello-world/","link":"","permalink":"https://gsneotek-wisen.github.io/2018/04/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://gsneotek-wisen.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://gsneotek-wisen.github.io/tags/Hexo/"}]}]}